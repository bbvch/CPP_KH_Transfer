// SPDX-License-Identifier: GPL-3.0

#include <iostream>

/**
 * @brief
 * The difference is the priority given to the two options. A constructor initializer,
 *  directly specified, has precedence. In both cases we end up with a member initializer via different paths.
 *
 *   It is best to use the default member initializer because:
 *      - then the compiler can use that information to generate the constructor's initializer list for you and it might be able to optimize.
 *      - You can see all the defaults in one place and in sequence.
 *      - It reduces duplication. You could then only put the exceptions in the manually specified member initializer list.
 *
 */

struct Boiler {
    int id;
    int volume;
    std::string name;

    // the constructor initializer has precedence
    Boiler()
    : id(-1),
    volume(100),
    name("") {
    }
};

struct Brewer {
    // since no constructor initializer was specified
    // the default member initialization is used
    // the default constructor is autogenerated by compiler
    int id{-1};
    int amount{16};
    std::string name{""};
};

int main(int, char **) {
    Boiler boiler;
    std::cout << "boiler.volume " << boiler.volume << std::endl;

    Brewer brewer;
    std::cout << "brewer.amount " << brewer.amount << std::endl;
    return 0;
}